package commonlyused.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jiuyi.model.DictBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DICT_BEAN".
*/
public class DictBeanDao extends AbstractDao<DictBean, Long> {

    public static final String TABLENAME = "DICT_BEAN";

    /**
     * Properties of entity DictBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Desp = new Property(2, String.class, "desp", false, "DESP");
        public final static Property Key = new Property(3, String.class, "key", false, "KEY");
        public final static Property Value = new Property(4, String.class, "value", false, "VALUE");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property Originalid = new Property(6, long.class, "originalid", false, "ORIGINALID");
    }


    public DictBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DictBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DICT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DESP\" TEXT," + // 2: desp
                "\"KEY\" TEXT," + // 3: key
                "\"VALUE\" TEXT," + // 4: value
                "\"REMARK\" TEXT," + // 5: remark
                "\"ORIGINALID\" INTEGER NOT NULL );"); // 6: originalid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DICT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DictBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(3, desp);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(4, key);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(5, value);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
        stmt.bindLong(7, entity.getOriginalid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DictBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(3, desp);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(4, key);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(5, value);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
        stmt.bindLong(7, entity.getOriginalid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DictBean readEntity(Cursor cursor, int offset) {
        DictBean entity = new DictBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // key
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // value
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.getLong(offset + 6) // originalid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DictBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOriginalid(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DictBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DictBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DictBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
