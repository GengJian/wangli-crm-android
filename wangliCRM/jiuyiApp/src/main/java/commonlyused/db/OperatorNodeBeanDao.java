package commonlyused.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import commonlyused.bean.OperatorNodeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPERATOR_NODE_BEAN".
*/
public class OperatorNodeBeanDao extends AbstractDao<OperatorNodeBean, Long> {

    public static final String TABLENAME = "OPERATOR_NODE_BEAN";

    /**
     * Properties of entity OperatorNodeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nodeid = new Property(1, String.class, "nodeid", false, "NODEID");
        public final static Property Nodepid = new Property(2, String.class, "nodepid", false, "NODEPID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Duty = new Property(4, String.class, "duty", false, "DUTY");
        public final static Property Count = new Property(5, int.class, "count", false, "COUNT");
        public final static Property IsPeople = new Property(6, int.class, "isPeople", false, "IS_PEOPLE");
    }


    public OperatorNodeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OperatorNodeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATOR_NODE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NODEID\" TEXT," + // 1: nodeid
                "\"NODEPID\" TEXT," + // 2: nodepid
                "\"NAME\" TEXT," + // 3: name
                "\"DUTY\" TEXT," + // 4: duty
                "\"COUNT\" INTEGER NOT NULL ," + // 5: count
                "\"IS_PEOPLE\" INTEGER NOT NULL );"); // 6: isPeople
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATOR_NODE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OperatorNodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nodeid = entity.getNodeid();
        if (nodeid != null) {
            stmt.bindString(2, nodeid);
        }
 
        String nodepid = entity.getNodepid();
        if (nodepid != null) {
            stmt.bindString(3, nodepid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(5, duty);
        }
        stmt.bindLong(6, entity.getCount());
        stmt.bindLong(7, entity.getIsPeople());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OperatorNodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nodeid = entity.getNodeid();
        if (nodeid != null) {
            stmt.bindString(2, nodeid);
        }
 
        String nodepid = entity.getNodepid();
        if (nodepid != null) {
            stmt.bindString(3, nodepid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(5, duty);
        }
        stmt.bindLong(6, entity.getCount());
        stmt.bindLong(7, entity.getIsPeople());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OperatorNodeBean readEntity(Cursor cursor, int offset) {
        OperatorNodeBean entity = new OperatorNodeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nodeid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nodepid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // duty
            cursor.getInt(offset + 5), // count
            cursor.getInt(offset + 6) // isPeople
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OperatorNodeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNodeid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNodepid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.getInt(offset + 5));
        entity.setIsPeople(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OperatorNodeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OperatorNodeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OperatorNodeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
